{"version":3,"sources":["components/Header/HeaderStyle.js","components/Header/Header.tsx","assets/Blocks-1s-200px.svg","components/Preloader/Preloader.tsx","components/WeatherData/WeatherDataStyle.js","components/WeatherData/WeatherData.tsx","components/Main/MainStyle.js","components/Main/Main.tsx","api/api.ts","redux/main-reducer.ts","components/Main/MainContainer.tsx","App.tsx","reportWebVitals.ts","redux/redux-store.ts","index.tsx"],"names":["useStyles","createUseStyles","header","height","display","alignItems","title","fontSize","Header","s","useStyle","className","Preloader","alt","src","loading","row","paddingTop","name","country","weather","textAlign","WeatherData","props","data","sys","main","mainWrapper","flexDirection","inputBlock","width","Main","useState","query","setQuery","placeholder","onKeyPress","e","key","length","getWeather","alert","onChange","target","value","type","APIKEY","API","q","axios","get","lat","lon","SET_DATA","initialState","actions","MainReducer","state","action","connect","dispatch","a","response","getWeatherByCoordinates","useEffect","navigator","geolocation","getCurrentPosition","position","console","log","coords","latitude","longitude","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.662e896e.chunk.js","sourcesContent":["import {createUseStyles} from 'react-jss'\r\n\r\nconst useStyles = createUseStyles ({\r\n    header: {\r\n        height: \"100px\",\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n    title: {\r\n        fontSize: \"30px\"\r\n    },\r\n})\r\n\r\nexport default useStyles;","import useStyle from \"./HeaderStyle\"\r\n\r\nconst Header: React.FunctionComponent = () => {\r\n    const s = useStyle ()\r\n\r\n    return (\r\n        <div className = {s.header} >\r\n            <div className = {s.title} >\r\n                Open Weather Map\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","export default __webpack_public_path__ + \"static/media/Blocks-1s-200px.b67ad5ee.svg\";","import loading from \"../../assets/Blocks-1s-200px.svg\"\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <div>\r\n            <img alt = \"Loading Gif\" src = {loading} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader;","import {createUseStyles} from 'react-jss'\r\n\r\nconst useStyles = createUseStyles ({\r\n    row: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        paddingTop: \"50px\",\r\n\r\n    },\r\n    name: {\r\n        fontSize: \"25px\",\r\n    },\r\n    country: {\r\n        fontSize: \"25px\",\r\n    },\r\n    weather: {\r\n        textAlign: \"center\",\r\n        fontSize: \"20px\",\r\n    },\r\n})\r\n\r\nexport default useStyles;","import { WeatherResponseType } from \"../../types/types\"\r\nimport useStyle from \"./WeatherDataStyle\"\r\n\r\ntype WeatherDataPropsType = {\r\n    data: WeatherResponseType,\r\n}\r\n\r\nconst WeatherData: React.FunctionComponent <WeatherDataPropsType> = (props) => {\r\n    const s = useStyle ()\r\n\r\n    return (\r\n        <div>\r\n            <div className = {s.row} >\r\n                <div className = {s.name} >\r\n                    {props.data.name},\r\n                </div>\r\n                <div className = {s.country} >\r\n                    {props.data.sys.country}\r\n                </div>\r\n            </div>\r\n            <div className = {s.weather} >\r\n                {/* @ts-ignore */}\r\n                {props.data.weather[0].main}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherData;","import {createUseStyles} from 'react-jss'\r\n\r\nconst useStyles = createUseStyles ({\r\n    mainWrapper: {\r\n        display: 'flex',\r\n        flexDirection: \"column\",\r\n        alignItems: 'center',\r\n    },\r\n    inputBlock: {\r\n        width: \"320px\",\r\n    }\r\n})\r\n\r\nexport default useStyles;","import { useState } from \"react\"\r\nimport { WeatherResponseType } from \"../../types/types\"\r\nimport Preloader from \"../Preloader/Preloader\"\r\nimport WeatherData from \"../WeatherData/WeatherData\"\r\nimport useStyle from \"./MainStyle\"\r\n\r\ntype MainPropsType = {\r\n    data: WeatherResponseType,\r\n    getWeather: (q: string) => void,\r\n}\r\n\r\nconst Main: React.FunctionComponent <MainPropsType> = (props) => {\r\n    const s = useStyle ()\r\n\r\n    const [ query, setQuery ] = useState (\"\");\r\n    const onChangeHadler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setQuery (e.target.value)\r\n    }\r\n    const getDataHandler = (e: React.KeyboardEvent) => {\r\n        if (e.key === \"Enter\") {\r\n            if (!query.length) {\r\n                alert (\"Enter a city name\")\r\n            } else {\r\n                props.getWeather (query)\r\n            }\r\n        }\r\n    }\r\n   \r\n    \r\n    \r\n\r\n    return (\r\n        <div className = {s.mainWrapper} >\r\n            <div className = {s.inputBlock} >\r\n                <input placeholder = \"Enter a city name\" className = \"form-control\" onKeyPress = { getDataHandler } onChange = { onChangeHadler } type = \"text\" value = { query } />\r\n            </div>\r\n            {props.data.weather \r\n                ? <WeatherData data = {props.data} />\r\n                : <Preloader />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main;","import axios from \"axios\"\r\n\r\nconst APIKEY = \"fed7d1a56fd2de2f78944ed8d70c4f97\"\r\n\r\nexport const API = {\r\n    getWeather (q: string) {\r\n        return axios.get (`https://api.openweathermap.org/data/2.5/weather?q=${q}&appid=${APIKEY}`)\r\n    },\r\n    getWeatherByLatAndLon (lat: number, lon: number) {\r\n        return axios.get (`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${APIKEY}`)\r\n    }\r\n}","import { API } from './../api/api';\r\nimport { AppStateType } from './redux-store';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { WeatherResponseType } from './../types/types';\r\n\r\nconst SET_DATA = \"SET_DATA\"\r\nconst SET_ERROR = \"SET_ERROR\"\r\n\r\nconst initialState = {\r\n    data: {} as WeatherResponseType,\r\n}\r\n\r\ntype IniitalStateType = typeof initialState\r\n\r\nconst MainReducer = (state = initialState, action: ActionsTypes): IniitalStateType => {\r\n    switch (action.type) {\r\n        case SET_DATA:\r\n            return { ...state, data: action.data }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype PropertiesType <T> = T extends { [key: string]: infer U } ? U : never\r\ntype ActionsTypes = ReturnType <PropertiesType <typeof actions> >\r\n\r\nexport const actions = {\r\n    setData: (data: WeatherResponseType) => ( { type: SET_DATA, data } as const ),\r\n}\r\n\r\n\r\n\r\ntype ThunkType = ThunkAction <Promise <void>, AppStateType, unknown, ActionsTypes>\r\n\r\nexport const getWeather = (q: string): ThunkType => async (dispatch) => {\r\n    const response = await API.getWeather (q)\r\n    dispatch ( actions.setData (response.data) )\r\n}\r\n\r\nexport const getWeatherByCoordinates = (lat: number, lon: number): ThunkType => async (dispatch) => {\r\n    const response = await API.getWeatherByLatAndLon (lat, lon)\r\n    dispatch ( actions.setData (response.data) )\r\n}\r\n\r\nexport default MainReducer;","import { connect } from \"react-redux\"\r\nimport { AppStateType } from \"../../redux/redux-store\"\r\nimport Main from \"./Main\"\r\nimport { getWeather, getWeatherByCoordinates } from \"../../redux/main-reducer\"\r\nimport { useEffect } from \"react\"\r\nimport { WeatherResponseType } from \"../../types/types\"\r\n\r\ntype PropsType = {\r\n    data: WeatherResponseType,\r\n    getWeather: (q: string) => void,\r\n    getWeatherByCoordinates: (lat: number, lon: number) => void,\r\n}\r\n\r\nconst MainContainer: React.FunctionComponent <PropsType> = (props) => {\r\n\r\n    useEffect ( () => {\r\n        if (\"geolocation\" in navigator) {\r\n            navigator.geolocation.getCurrentPosition(function(position) {\r\n                console.log(\"Latitude is :\", position.coords.latitude);\r\n                console.log(\"Longitude is :\", position.coords.longitude);\r\n                props.getWeatherByCoordinates (position.coords.latitude, position.coords.longitude)\r\n              });;\r\n        } else {\r\n            console.log(\"UNVALIABLE user geolocation\");\r\n        }\r\n    }, [] )\r\n\r\n    return (\r\n        <Main { ...props } />\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        data: state.main.data,\r\n    }\r\n}\r\n\r\nexport default connect ( mapStateToProps, {getWeather, getWeatherByCoordinates} )(MainContainer);","import './App.css';\nimport Header from './components/Header/Header';\nimport MainContainer from './components/Main/MainContainer';\n\nfunction App() {\n  return (\n    <div className = \"container\" >\n      <Header />\n      <MainContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {createStore, combineReducers, applyMiddleware} from \"redux\"\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport MainReducer from \"./main-reducer\"\r\n\r\nlet rootReducer = combineReducers ({\r\n    main: MainReducer\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType <RootReducerType>\r\n\r\nconst store = createStore (rootReducer, applyMiddleware (thunkMiddleware) )\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store  from \"./redux/redux-store\";\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}